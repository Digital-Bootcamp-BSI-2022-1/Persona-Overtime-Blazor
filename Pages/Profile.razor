@page "/profile"

@using Models;
@using Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IUserDetailService UserDetailService;

<style>
    .spanner {
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        text-align: center;
        color: #0582AE;
        visibility: visible;
    }

    .mycontainer {
            display: flex;
            flex-direction: row;
    }
    .mycontainer > div {
            padding: 20px;
            vertical-align: middle;
    }
</style>

<PageTitle>Profile - Persona</PageTitle>

@if (isLoadingPage)
{
    <div style="height: 80vh;">
        <div class="spanner" style="display:flex;justify-content:center;align-items:center;">
            <div>
                <div class="spinner-border"></div>
                <p>Loading</p>
            </div>
        </div>
    </div>
}
else
{
    @if (!isLoggedIn)
    {
        <div style="height: 80vh;">
            <div class="spanner" style="display:flex;justify-content:center;align-items:center;">
                <div>
                    <div><span class="oi oi-circle-x" aria-hidden="true" style="font-size: 30px; color: #CA000E;"></span></div>
                    <p>Please <a href="/login"><b>Login</b></a></p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="mycontainer">
            <br>
                <div class="col-2">
                    <img src="img\user.png" alt="profile" width="100%">
                </div>
                <div class="col-10">
                    <p type="text"> @User.name</p>
                    <p type="text"> @User.nik</p>
                    <p type="text"> @User.role</p>
                </div>
            </div>
            <br>
            <div class="row">
                <div class="col-sm-6">
                    <p type="text">Grade</p>
                    <p type="text">&nbsp;&nbsp;@User.grade</p>
                    <hr size="4px" />

                    <p type="text">Phone</p>
                    <p type="text">&nbsp;&nbsp;@User.phone</p>
                    <hr size="4px" />

                    <p type="text">KTP</p>
                    <p type="text">&nbsp;&nbsp;@User.ktp</p>
                    <hr size="4px" />

                    <p type="text">Join Date</p>
                    <p type="text">&nbsp;&nbsp;@User.join_date</p>
                    <hr size="4px" />
                </div>
                <div class="col-sm-6">
                    <p type="text">Employement Status</p>
                    <p type="text">&nbsp;&nbsp;@User.employment_status</p>
                    <hr size="4px" />

                    <p type="text">Email</p>
                    <p type="text">&nbsp;&nbsp;@User.email</p>
                    <hr size="4px" />

                    <p type="text">NPWP</p>
                    <p type="text">&nbsp;&nbsp;@User.npwp</p>
                    <hr size="4px" />
                </div>
            </div>
    }
}

@code {
    private bool isLoadingPage = true;
    private bool isLoggedIn = false;
    private bool isLoading = true;
    public UserDTO User { get; set; } = new UserDTO();

    protected override async Task OnInitializedAsync()
    {
        isLoadingPage = true;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
        {
            isLoggedIn = true;
            await GetUserDetail(result.Value);
            isLoadingPage = false;
        }
        else
        {
            isLoggedIn = false;
            isLoadingPage = false;
        }
    }

    private async Task GetUserDetail(string token)
    {
        User = await UserDetailService.GetUserDetail(token);

        @* Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(User)); *@
    }
}
