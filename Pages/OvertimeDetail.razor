@page "/overtime/detail/{id}"
@using Models
@using Services
@using System.Text.Json
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Headers
@using PersonaOvertimeWeb.Components
@inject IOvertimeService OvertimeService
@inject IUserDetailService UserDetailService
@inject NavigationManager UriHelper
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigation
@inject ILogger<OvertimeRequest> Logger
@inject IWebHostEnvironment Environment

<style>
    .spanner_transparent {
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        text-align: center;
        color: #0582AE;
        visibility: visible;
    }

    .spanner {
        position: absolute;
        top: 0;
        left: 0;
        background: #2a2a2a55;
        width: 100%;
        height: 100%;
        display: block;
        text-align: center;
        color: #FFF;
        visibility: visible;
    }

    .overlay {
        position: relative;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        visibility: visible;
    }

    span.required {
        color: #CA000E;
    }
</style>

<PageTitle>Overtime Detail - Persona</PageTitle>

@if (isLoadingPage)
{
    <div style="height: 80vh;">
        <div class="spanner_transparent" style="display:flex;justify-content:center;align-items:center;">
            <div>
                <div class="spinner-border"></div>
                <p>Loading</p>
            </div>
        </div>
    </div>
}
else
{
    @if (!isLoggedIn)
    {
        <div style="height: 80vh;">
            <div class="spanner_transparent" style="display:flex;justify-content:center;align-items:center;">
                <div>
                    <div><span class="oi oi-circle-x" aria-hidden="true" style="font-size: 30px; color: #CA000E;"></span></div>
                    <p>Please <a href="/login"><b>Login</b></a></p>
                </div>
            </div>
        </div>
    }
    else
    {
        @if (User.grade != "VIA")
        {
            <div class="container" style="padding: 20px;">
                @if (Status == 1)
                {
                    <h3>Overtime Request Detail</h3>
                }
                else if (Status == 4)
                {
                    <h3>Overtime Settlement Detail</h3>
                }
                else
                {
                    <h3>Overtime Detail</h3>
                }
                <br>
                <div class="row">
                    <div class="col-sm-6">
                        <p>Requester</p>
                        <div class="mb-3" style="width: 50%;">
                            <input type="text" class="form-control" @bind="Requester" disabled>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-6">
                        <p>Start Date<span class="required">*</span></p>
                        <div class="mb-3" style="width: 50%;">
                            <input type="date" class="form-control" @bind="StartDate" disabled>
                        </div>

                        @if (Status == 1)
                        {
                            <p>Start Time (Plan)<span class="required">*</span></p>
                        }
                        else if (Status == 4)
                        {
                            <p>Start Time (Actual)<span class="required">*</span></p>
                        }
                        <div class="mb-3" style="width: 50%;">
                            <input type="time" class="form-control" @bind="StartTime" disabled>
                        </div>

                        @if (AttachmentFile != null)
                        {
                            <p>Attachment</p>
                            <div class="mb-3" style="height: 30vh; max-width: 90%">
                                <img src=@AttachmentFile alt="Attachment Image" style="height: 100%;" disabled>
                            </div>
                        }

                        <p>Remarks</p>
                        <div class="mb-3" style="width: 80%;">
                            <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="Remarks"
                    disabled></textarea>
                        </div>

                        <br>

                        @if (Status == 1)
                        {
                            <p>Request Date : @RequestDate.ToString("MMMM, dd yyyy")</p>
                        }

                        else if (Status == 2 || Status == 4 || Status == 5)
                        {
                            <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                            <p>Approved Date: @ApprovedDate.ToString("MMMM, dd yyyy")</p>
                        }

                        else if (Status == 3)
                        {
                            <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                            <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                        }

                        else if (Status == 6)
                        {
                            <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                            <p>Approved Date: @ApprovedDate.ToString("MMMM, dd yyyy")</p>
                            <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                        }

                        else if (Status == 9)
                        {
                            <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                            <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                        }
                    </div>

                    <div class="col-sm-6">
                        <p>End Date<span class="required">*</span></p>
                        <div class="mb-3" style="width: 50%;">
                            <input type="date" class="form-control" @bind="EndDate" disabled>
                        </div>

                        @if (Status == 1)
                        {
                            <p>End Time (Plan)<span class="required">*</span></p>
                        }
                        else if (Status == 4)
                        {
                            <p>End Time (Actual)<span class="required">*</span></p>
                        }
                        <div class="mb-3" style="width: 50%;">
                            <input type="time" class="form-control" @bind="EndTime" disabled>
                        </div>
                    </div>
                </div>
                <br>
                @if (Status == 1)
                {
                    <div class="mb-3" style="display:flex;justify-content:center;align-items:center;">
                        <button class="btn" style="background-color: #0483BA; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => PostOvertimeStatus(2)">
                            APPROVE
                        </button>

                        <button class="btn" style="background-color: #CA000E; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => DialogReject()">
                            REJECT
                        </button>
                    </div>
                }

                else if (Status == 4)
                {
                    <div class="mb-3" style="display:flex;justify-content:center;align-items:center;">
                        <button class="btn" style="background-color: #0483BA; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => PostOvertimeStatus(6)">
                            APPROVE
                        </button>

                        <button class="btn" style="background-color: #CA000E; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => PostOvertimeStatus(5)">
                            REVISE
                        </button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="container" style="padding: 20px;">
                @if (Status == 1 || Status == 3 || Status == 4 || Status == 6 || Status == 9)
                {
                    @if (Status == 1 || Status == 3)
                    {
                        <h3>Overtime Request Detail</h3>
                    }
                    else if (Status == 9)
                    {
                        <h3>Overtime Detail</h3>
                    }
                    else if (Status == 5 || Status == 6)
                    {
                        <h3>Overtime Realization Detail</h3>
                    }

                    <br>
                    <div class="row">
                        <div class="col-sm-6">
                            <p>Start Date<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="date" class="form-control" @bind="StartDate" disabled>
                            </div>
                            @if (Status == 1 || Status == 3)
                            {
                                <p>Start Time (Plan)<span class="required">*</span></p>
                            }
                            else if (Status == 9)
                            {
                                <p>Start Time<span class="required">*</span></p>
                            }
                            else if (Status == 4 || Status == 6)
                            {
                                <p>Start Time (Actual)<span class="required">*</span></p>
                            }
                            <div class="mb-3" style="width: 50%;">
                                <input type="time" class="form-control" @bind="StartTime" disabled>
                            </div>

                            @if (AttachmentFile != null)
                            {
                                <p>Attachment</p>
                                <div class="mb-3" style="height: 30vh; max-width: 90%">
                                    <img src=@AttachmentFile alt="Attachment Image" style="height: 100%;" disabled>
                                </div>
                            }

                            <p>Remarks</p>
                            <div class="mb-3" style="width: 80%;">
                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="Remarks"
                    disabled></textarea>
                            </div>

                            <br>

                            @if (Status == 1)
                            {
                                <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                            }

                            else if (Status == 2 || Status == 4 || Status == 5)
                            {
                                <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                                <p>Approved Date: @ApprovedDate.ToString("MMMM, dd yyyy")</p>
                            }

                            else if (Status == 3)
                            {
                                <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                                <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                            }

                            else if (Status == 6)
                            {
                                <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                                <p>Approved Date: @ApprovedDate.ToString("MMMM, dd yyyy")</p>
                                <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                            }

                            else if (Status == 9)
                            {
                                <p>Request Date: @RequestDate.ToString("MMMM, dd yyyy")</p>
                                <p>Completed Date: @CompletedDate.ToString("MMMM, dd yyyy")</p>
                            }
                        </div>

                        <div class="col-sm-6">
                            <p>End Date<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="date" class="form-control" @bind="EndDate" disabled>
                            </div>
                            @if (Status == 1 || Status == 3)
                            {
                                <p>End Time (Plan)<span class="required">*</span></p>
                            }
                            else if (Status == 9)
                            {
                                <p>End Time<span class="required">*</span></p>
                            }
                            else if (Status == 4 || Status == 6)
                            {
                                <p>End Time (Actual)<span class="required">*</span></p>
                            }
                            <div class="mb-3" style="width: 50%;">
                                <input type="time" class="form-control" @bind="EndTime" disabled>
                            </div>
                        </div>
                    </div>
                    <br>
                    @if (Status == 1 || Status == 4)
                    {
                        <div class="mb-3" style="display:flex;justify-content:center;align-items:center;">
                            <button class="btn" style="background-color: #CA000E; color: white; width: 30%"
            @onclick="() => DialogCancel()">
                                CANCEL
                            </button>
                        </div>
                    }
                }
                else
                {
                    <h3>Overtime Settlement Form</h3>
                    <br>
                    <div class="row">
                        <div class="col-sm-6">
                            <p>Start Date<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="date" class="form-control" @bind="StartDate">
                            </div>

                            <p>Start Time (Actual)<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="time" class="form-control" @bind="StartTime">
                            </div>

                            @if (AttachmentFile != null)
                            {
                                <p>Attachment</p>
                                <div class="mb-3" style="height: 30vh; max-width: 90%">
                                    <img src=@AttachmentFile alt="Attachment Image" style="height: 100%;">
                                </div>
                            }
                            else
                            {
                                <p>Upload Attachment</p>
                                <div class="mb-3" style="width: 80%;">
                                    <InputFile OnChange="@LoadFiles" class="form-control" />
                                </div>
                            }

                            <p>Remarks</p>
                            <div class="mb-3" style="width: 80%;">
                                <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="Remarks"></textarea>
                            </div>

                            <br>

                            <p>Request Date : @RequestDate.ToString("MMMM, dd yyyy")</p>
                            <p>Approved Date : @ApprovedDate.ToString("MMMM, dd yyyy")</p>
                        </div>

                        <div class="col-sm-6">
                            <p>End Date<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="date" class="form-control" @bind="EndDate">
                            </div>

                            <p>End Time (Actual)<span class="required">*</span></p>
                            <div class="mb-3" style="width: 50%;">
                                <input type="time" class="form-control" @bind="EndTime">
                            </div>
                        </div>
                    </div>
                    <br>
                    <div class="mb-3" style="display:flex;justify-content:center;align-items:center;">
                        <button class="btn" style="background-color: #0483BA; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => PostOvertimeStatus(4)">
                            SUBMIT
                        </button>
                        <button class="btn" style="background-color: #CA000E; color: white; width: 30%; margin: 4px 2px;"
            @onclick="() => DialogCancel()">
                            CANCEL
                        </button>
                    </div>
                }
            </div>
        }
    }
}

@if (DialogIsOpen)
{
    <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogClose" Type="@dialogType">
    </Dialog>
}

@if (DialogCancelIsOpen)
{
    <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogCancelClose" Type="@dialogType">
    </Dialog>
}

@if (DialogRejectIsOpen)
{
    <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogRejectClose" Type="@dialogType">
    </Dialog>
}

@if (DialogUpdateIsOpen)
{
    <Dialog_PostOT Title="@dialogUpdateTitle" Content="@dialogUpdateMessage" OnClose="@OnDialogUpdateClose" Type="@dialogUpdateType" StatusUpdate="@dialogUpdateStatus">
    </Dialog_PostOT>
}

@if (isLoading)
{
    <div class="overlay"></div>
    <div class="spanner" style="display:flex;justify-content:center;align-items:center;">
        <div>
            <div class="spinner-border"></div>
            <p>Loading</p>
        </div>
    </div>
}

@code {
    private bool isLoadingPage = true;
    private bool isLoggedIn = false;
    private bool isLoading = false;
    [Parameter]
    public string id { get; set; }
    public List<OvertimeDTO> OvertimeById { get; set; } = new List<OvertimeDTO>();
    public List<OvertimeDTO> OvertimeByIdSuperior { get; set; } = new List<OvertimeDTO>();
    public UserDTO User { get; set; } = new UserDTO();

    protected override async Task OnInitializedAsync()
    {
        isLoadingPage = true;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
        {
            await GetUserDetail();
            if (User.grade == "VIA")
            {
                await GetOvertimeById(Int32.Parse(id));
            }
            else
            {
                await GetOvertimeByIdSuperior(Int32.Parse(id));
            }
            isLoggedIn = true;
        }
        else
        {
            isLoggedIn = false;
        }
        isLoadingPage = false;
        isLoading = false;
    }

    private async Task GetOvertimeById(int id)
    {
        isLoading = true;

        var token = await ProtectedSessionStore.GetAsync<string>("token");
        OvertimeById = await OvertimeService.GetOvertimeById(id, token.Value);
        StartDate = OvertimeById[0].start_date;
        EndDate = OvertimeById[0].end_date;
        StartTime = OvertimeById[0].start_time;
        EndTime = OvertimeById[0].end_time;
        Remarks = OvertimeById[0].remarks!;
        Status = OvertimeById[0].status!;
        AttachmentFile = OvertimeById[0].attachment;
        RequestDate = OvertimeById[0].request_date;
        ApprovedDate = OvertimeById[0].approved_date;
        CompletedDate = OvertimeById[0].completed_date;

        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(OvertimeById));
        Console.WriteLine(AttachmentFile);
        isLoading = false;
    }

    private async Task GetOvertimeByIdSuperior(int id)
    {
        isLoading = true;

        var token = await ProtectedSessionStore.GetAsync<string>("token");
        OvertimeByIdSuperior = await OvertimeService.GetOvertimeByIdSuperior(id, token.Value);
        Requester = OvertimeByIdSuperior[0].user.name!;
        StartDate = OvertimeByIdSuperior[0].start_date;
        EndDate = OvertimeByIdSuperior[0].end_date;
        StartTime = OvertimeByIdSuperior[0].start_time;
        EndTime = OvertimeByIdSuperior[0].end_time;
        Remarks = OvertimeByIdSuperior[0].remarks!;
        Status = OvertimeByIdSuperior[0].status!;
        AttachmentFile = OvertimeByIdSuperior[0].attachment!;
        RequestDate = OvertimeByIdSuperior[0].request_date;
        ApprovedDate = OvertimeByIdSuperior[0].approved_date;
        CompletedDate = OvertimeByIdSuperior[0].completed_date;

        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(OvertimeByIdSuperior));
        isLoading = false;
    }

    private void Navigate(int id)
    {
        UriHelper.NavigateTo("/overtime/detail/" + id);
    }

    private async Task GetUserDetail()
    {
        isLoading = true;
        var token = await ProtectedSessionStore.GetAsync<string>("token");
        User = await UserDetailService.GetUserDetail(token.Value);
        isLoading = false;
    }

    private async Task PostOvertimeStatus(int Status)
    {
        if (StartDate != null && EndDate != null && StartTime != null && EndTime != null)
        {
            try
            {
                isLoading = true;
                var token = await ProtectedSessionStore.GetAsync<string>("token");
                MultipartFormDataContent formDataContent = new MultipartFormDataContent();
                formDataContent.Add(new StringContent(StartDate.ToString("MMMM dd, yyyy")), "start_date");
                formDataContent.Add(new StringContent(EndDate.ToString("MMMM dd, yyyy")), "end_date");
                formDataContent.Add(new StringContent(StartTime + ":00"), "start_time");
                formDataContent.Add(new StringContent(EndTime + ":00"), "end_time");
                formDataContent.Add(new StringContent(Status.ToString()), "status");
                formDataContent.Add(new StringContent(Remarks), "remarks");
                Console.WriteLine(JsonSerializer.Serialize(Attachment));
                if (Attachment.Count() != 0)
                {
                    var ms = new MemoryStream();
                    Console.WriteLine(JsonSerializer.Serialize(Attachment));
                    await Attachment[0].OpenReadStream().CopyToAsync(ms);
                    var b = ms.ToArray();
                    var imageContent = new ByteArrayContent(b);
                    imageContent.Headers.ContentType = MediaTypeHeaderValue.Parse(Attachment[0].ContentType);

                    formDataContent.Add(imageContent, "attachment", Attachment[0].Name);
                }

                ResponsePost = await OvertimeService.PostOvertimeStatus(int.Parse(id), formDataContent, token.Value);
                responseMessage = await ResponsePost.Content.ReadAsStringAsync();
                Console.WriteLine(responseMessage);
                isLoading = false;
                Console.WriteLine("Status is Loading : " + isLoading);
                Console.WriteLine(ResponsePost.IsSuccessStatusCode);
                if (ResponsePost.IsSuccessStatusCode)
                {
                    if (Status == 2)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully approve overtime request", type: Dialog.Category.Okay);
                    }
                    else if (Status == 3)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully rejecting overtime request", type: Dialog.Category.Okay);
                    }
                    else if (Status == 4)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully submit overtime settlement", type: Dialog.Category.Okay);
                    }
                    else if (Status == 5)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully requesting revisions for overtime settlement", type:
                        Dialog.Category.Okay);
                    }
                    else if (Status == 6)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully approve overtime settlement", type: Dialog.Category.Okay);
                    }
                    else if (Status == 9)
                    {
                        isLoading = false;
                        OpenDialog(title: "Request Success", message: "Successfully cancelled this overtime", type: Dialog.Category.Okay);
                    }

                }
                else
                {
                    isLoading = false;
                    OpenDialog(title: "Request Error", message: responseMessage, type: Dialog.Category.Null);
                }
            }
            catch (System.Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            isLoading = false;
            OpenDialog(title: "Request Error", message: "Data Submitted incomplete", type: Dialog.Category.Null);
        }
    }

    String Requester = "";
    DateOnly StartDate = new DateOnly(
    year: DateTime.Now.Year,
    month: DateTime.Now.Month,
    day: DateTime.Now.Day
    );
    DateOnly EndDate = new DateOnly(
    year: DateTime.Now.Year,
    month: DateTime.Now.Month,
    day: DateTime.Now.Day
    );
    TimeOnly StartTime = new TimeOnly(
    hour: DateTime.Now.Hour,
    minute: DateTime.Now.Minute,
    second: 0
    );
    TimeOnly EndTime = new TimeOnly(
    hour: DateTime.Now.Hour,
    minute: DateTime.Now.Minute,
    second: 0
    );
    String Remarks = "";
    int Status = 0;
    String? AttachmentFile;
    DateOnly RequestDate = new DateOnly();
    DateOnly ApprovedDate = new DateOnly();
    DateOnly CompletedDate = new DateOnly();

    private List<IBrowserFile> Attachment = new();
    private long maxFileSize = 1024 * 3000;
    private int maxAllowedFiles = 1;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        Attachment.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            Attachment.Add(file);
        }
        Console.WriteLine(Attachment[0].Name);

        isLoading = false;
    }

    private string dialogTitle = "";
    private string dialogMessage = "";
    private Dialog.Category dialogType = Dialog.Category.Okay;
    private EventCallback<bool> dialogOnClose;
    private bool DialogIsOpen = false;
    private void OpenDialog(string title, string message, Dialog.Category type)
    {
        DialogIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private void OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            NavigateToSubmission();
        }
        DialogIsOpen = false;
    }

    private void NavigateToSubmission()
    {
        Navigation.NavigateTo("/overtime/submission");
    }
    HttpResponseMessage ResponsePost = new HttpResponseMessage();
    String responseMessage = "";

    private void DialogCancel()
    {
        OpenDialogCancel(
            title: "Cancel Overtime",
            message: "Are you sure you want to cancel this request?",
            type: Dialog.Category.SaveNot
        );
    }
    private void OpenDialogCancel(string title, string message, Dialog.Category type)
    {
        DialogCancelIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private bool DialogCancelIsOpen = false;
    private void OnDialogCancelClose(bool isOk)
    {
        DialogCancelIsOpen = false;
        if (isOk)
        {
            PostOvertimeStatus(9);
        }
    }

    private void DialogReject()
    {
        OpenDialogCancel(
            title: "Reject Overtime",
            message: "Are you sure you want to reject this request?",
            type: Dialog.Category.SaveNot
        );
    }
    private void OpenDialogReject(string title, string message, Dialog.Category type)
    {
        DialogRejectIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private bool DialogRejectIsOpen = false;
    private void OnDialogRejectClose(bool isOk)
    {
        DialogRejectIsOpen = false;
        if (isOk)
        {
            PostOvertimeStatus(3);
        }
    }



    private string dialogUpdateTitle = "";
    private string dialogUpdateMessage = "";
    private Dialog_PostOT.Category dialogUpdateType = Dialog_PostOT.Category.Okay;
    private int dialogUpdateStatus = 0;
    private EventCallback<int> dialogUpdateOnClose;
    private bool DialogUpdateIsOpen = false;
    private void OpenDialogUpdate(string title, string message, Dialog_PostOT.Category type, int status)
    {
        DialogUpdateIsOpen = true;
        dialogUpdateTitle = title;
        dialogUpdateMessage = message;
        dialogUpdateType = type;
        dialogUpdateStatus = status;
    }
    private async void OnDialogUpdateClose(int status)
    {
        DialogUpdateIsOpen = false;
        if (status != 0)
        {
            await PostOvertimeStatus(status);
        }
    }

    private void DialogApprove(int status)
    {
        OpenDialogUpdate(
            title: "Approve Overtime",
            message: "Are you sure you want to approve this request?",
            type: Dialog_PostOT.Category.SaveNot,
            status: status
        );
    }

}
