@using PersonaOvertimeWeb.Models;
@using Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IOvertimeService OvertimeService;
@inject IUserDetailService UserDetailService;

@page "/"

<PageTitle>Home</PageTitle>

@if (isLoadingPage)
{
    <br><br><br>
    <p>Loading Page...</p>
    <br><br><br>
}
else
{
    @if (!isLoggedIn)
    {
        <br><br><br>
        <p>Please Login</p>
        <br><br><br>
    }
    else
    {
        <h3>Good Afternoon!</h3>

        <p>Welcome to Persona</p>

        <br><br><br>


        <br><br>

    <div class="calendar">
        <div class="calendar__picture">
            <h2>@date_now.ToString("MMMM, dd yyyy")</h2>
        </div>
    </div>
    <br><br>

        <br><br><br>

        @if (isLoading)
        {
            <p>Loading data.....</p>
        }
        else
        {
            <p>Overtime Activity</p>

            <br><br>
            @if (User.grade != "VIA")
            {
                @if (OvertimestatisticDataSup != null)
            {
                <div class="text-center" style="font-family: system-ui;">
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Need Approval</div>
                                    <h3>@(OvertimestatisticDataSup.data.need_approval + OvertimestatisticData.data.settlement_approval)</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Approved</div>
                                    <h3>@(OvertimestatisticDataSup.data.approved + OvertimestatisticData.data.revise)</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Rejected</div>
                                    <h3>@OvertimestatisticDataSup.data.rejected</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Completed</div>
                                    <h3>@OvertimestatisticDataSup.data.completed</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            }
            else
            {
            @if (OvertimestatisticData != null)
            {
                <div class="text-center" style="font-family: system-ui;">
                    <div class="col">
                        <div class="row">
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Need Approval</div>
                                    <h3>@(OvertimestatisticData.data.need_approval + OvertimestatisticData.data.settlement_approval)</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Approved</div>
                                    <h3>@(OvertimestatisticData.data.approved + OvertimestatisticData.data.revise)</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Rejected</div>
                                    <h3>@OvertimestatisticData.data.rejected</h3>
                                </div>
                            </div>
                            <div class="col">
                                <div class="card__a">
                                    <div class="card-header">Completed</div>
                                    <h3>@OvertimestatisticData.data.completed</h3>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
            <br><br><br><br><br><br>
            <SurveyPrompt Title="How is Blazor working for you?" />
        }
    }
}


@code {
    private bool isLoadingPage = true;
    private bool isLoggedIn = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoadingPage = true;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
        {
            isLoggedIn = true;
            await GetUserDetail();
            await GetOvertimeStatistic();
            await GetOvertimeStatisticSuperior();
            isLoadingPage = false;
        }
        else
        {
            isLoggedIn = false;
            isLoadingPage = false;
        }
    }

    DateOnly date_now = DateOnly.FromDateTime(DateTime.Now);

    public SuccessResponse<OvertimeStatistic> OvertimestatisticData { get; set; } = new();
    public SuccessResponse<OvertimeStatistic> OvertimestatisticDataSup { get; set; } = new();
    public UserDTO User { get; set; } = new UserDTO();


    private async Task GetOvertimeStatistic()
    {
        isLoading = true;
        var token = await ProtectedSessionStore.GetAsync<string>("token");
        OvertimestatisticData = await OvertimeService.GetOvertimeStatistic(token.Value);
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(OvertimestatisticData));
        isLoading = false;
    }

    private async Task GetOvertimeStatisticSuperior()
    {
        isLoading = true;
        var token = await ProtectedSessionStore.GetAsync<string>("token");
        OvertimestatisticDataSup = await OvertimeService.GetOvertimeStatisticSuperior(token.Value);
        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(OvertimestatisticData));
        isLoading = false;
    }

    private async Task GetUserDetail()
    {
        isLoading = true;
        var token = await ProtectedSessionStore.GetAsync<string>("token");
        User = await UserDetailService.GetUserDetail(token.Value);
        isLoading = false;
    }
}