@page "/overtime/request"

@using Models
@using PersonaOvertimeWeb.Components
@using Services
@using System
@using System.IO
@using System.Text.Json
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Headers
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigation
@inject IOvertimeService OvertimeService
@inject ILogger<OvertimeRequest> Logger
@inject IWebHostEnvironment Environment

<style>
    .spanner_transparent {
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        text-align: center;
        color: #0582AE;
        visibility: visible;
    }

    .spanner {
        position: absolute;
        top: 0;
        left: 0;
        background: #2a2a2a55;
        width: 100%;
        height: 100%;
        display: block;
        text-align: center;
        color: #FFF;
        visibility: visible;
    }

    .overlay {
        position: relative;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        visibility: visible;
    }

    span.required {
        color: #CA000E;
    }
</style>

<PageTitle>Overtime Request - Persona</PageTitle>

@if (isLoadingPage)
{
    <div style="height: 80vh;">
        <div class="spanner_transparent" style="display:flex;justify-content:center;align-items:center;">
            <div>
                <div class="spinner-border"></div>
                <p>Loading</p>
            </div>
        </div>
    </div>
}
else
{
    @if (!isLoggedIn)
    {
        <div style="height: 80vh;">
            <div class="spanner_transparent" style="display:flex;justify-content:center;align-items:center;">
                <div>
                    <div><span class="oi oi-circle-x" aria-hidden="true" style="font-size: 30px; color: #CA000E;"></span></div>
                    <p>Please <a href="/login"><b>Login</b></a></p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="container" style="padding: 20px;">
            <h3>Overtime Request Form</h3>
            <br>
            <div class="row">
                <div class="col-sm-6">
                    <p>Start Date<span class="required">*</span></p>
                    <div class="mb-3" style="width: 50%;">
                        <input type="date" class="form-control" @bind="StartDate">
                    </div>

                    <p>Start Time (Plan)<span class="required">*</span></p>
                    <div class="mb-3" style="width: 50%;">
                        <input type="time" class="form-control" @bind="StartTime">
                    </div>

                    <p>Attachment</p>
                    <div class="mb-3" style="width: 80%;">
                        <InputFile OnChange="@LoadFiles" class="form-control" accept=".png,.jpeg"/>
                    </div>

                    <p>Remarks</p>
                    <div class="mb-3" style="width: 80%;">
                        <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" @bind="Remarks"></textarea>
                    </div>

                    <br>

                    <p>Request Date: @RequestDate.ToString("MMMM dd, yyyy")</p>
                </div>
                <div class="col-sm-6">
                    <p>End Date<span class="required">*</span></p>
                    <div class="mb-3" style="width: 50%;">
                        <input type="date" class="form-control" @bind="EndDate">
                    </div>

                    <p>End Time (Plan)<span class="required">*</span></p>
                    <div class="mb-3" style="width: 50%;">
                        <input type="time" class="form-control" @bind="EndTime">
                    </div>
                </div>
            </div>
            <br>
            <div class="mb-3" style="display:flex;justify-content:center;align-items:center;">
                <button class="btn" style="background-color: #0483BA; color: white; width: 30%"
            @onclick="PostOvertimeRequest">
                    SUBMIT
                </button>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="overlay"></div>
            <div class="spanner" style="display:flex;justify-content:center;align-items:center;">
                <div>
                    <div class="spinner-border"></div>
                    <p>Loading</p>
                </div>
            </div>
        }
    }
}

@if (DialogIsOpen)
{
    <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogClose" Type="@dialogType">
    </Dialog>
}

@code {
    private bool isLoadingPage = true;
    private bool isLoggedIn = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoadingPage = true;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
        {
            isLoggedIn = true;
        }
        else
        {
            isLoggedIn = false;
        }
        isLoadingPage = false;
        isLoading = false;
    }

    DateOnly StartDate = new DateOnly(
    year: DateTime.Now.Year,
    month: DateTime.Now.Month,
    day: DateTime.Now.Day
    );
    DateOnly EndDate = new DateOnly(
    year: DateTime.Now.Year,
    month: DateTime.Now.Month,
    day: DateTime.Now.Day
    );
    TimeOnly StartTime = new TimeOnly(
    hour: DateTime.Now.Hour,
    minute: DateTime.Now.Minute,
    second: 0
    );
    TimeOnly EndTime = new TimeOnly(
    hour: DateTime.Now.Hour,
    minute: DateTime.Now.Minute,
    second: 0
    );
    String Remarks = "";
    DateOnly RequestDate = new DateOnly(
    year: DateTime.Now.Year,
    month: DateTime.Now.Month,
    day: DateTime.Now.Day
    );

    private List<IBrowserFile> Attachment = new();
    private long maxFileSize = 1024 * 3000;
    private int maxAllowedFiles = 1;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        Attachment.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            Attachment.Add(file);
        }
        Console.WriteLine(Attachment[0].Name);

        isLoading = false;
    }

    HttpResponseMessage ResponsePost = new HttpResponseMessage();
    String responseMessage = "";
    Response popupMessage = new Response();
    private async Task PostOvertimeRequest()
    {
        isLoading = true;
        if (StartDate != null && EndDate != null && StartTime != null && EndTime != null)
        {
            try
            {
                var token = await ProtectedSessionStore.GetAsync<string>("token");
                MultipartFormDataContent formDataContent = new MultipartFormDataContent();
                formDataContent.Add(new StringContent(StartDate.ToString("MMMM dd, yyyy")), "start_date");
                formDataContent.Add(new StringContent(EndDate.ToString("MMMM dd, yyyy")), "end_date");
                formDataContent.Add(new StringContent(StartTime + ":00"), "start_time");
                formDataContent.Add(new StringContent(EndTime + ":00"), "end_time");
                formDataContent.Add(new StringContent("1"), "status");
                formDataContent.Add(new StringContent(Remarks), "remarks");
                Console.WriteLine(JsonSerializer.Serialize(Attachment));
                if (Attachment.Count() != 0)
                {
                    var ms = new MemoryStream();
                    await Attachment[0].OpenReadStream().CopyToAsync(ms);
                    var b = ms.ToArray();
                    var imageContent = new ByteArrayContent(b);
                    imageContent.Headers.ContentType = MediaTypeHeaderValue.Parse(Attachment[0].ContentType);

                    formDataContent.Add(imageContent, "attachment", Attachment[0].Name);
                }

                ResponsePost = await OvertimeService.PostOvertimeRequest(formDataContent, token.Value);
                @* Console.WriteLine(ResponsePost.RequestMessage);
                    Console.WriteLine(ResponsePost);
                    Console.WriteLine(ResponsePost.StatusCode); *@
                responseMessage = await ResponsePost.Content.ReadAsStringAsync();
                Console.WriteLine(responseMessage);
                if (ResponsePost.IsSuccessStatusCode)
                {
                    OpenDialog(title: "Request Success", message: "Successfully submitted request overtime", type: Dialog.Category.Okay);
                }
                else
                {
                    popupMessage = JsonSerializer.Deserialize<Response>(responseMessage);
                    OpenDialog(title: "Request Error", message: popupMessage.message, type: Dialog.Category.Null);
                }
            }
            catch (System.Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            OpenDialog(title: "Request Error", message: "Data Submitted incomplete", type: Dialog.Category.Null);
        }
        isLoading = false;
    }

    private string dialogTitle = "";
    private string dialogMessage = "";
    private Dialog.Category dialogType = Dialog.Category.Okay;
    private bool DialogIsOpen = false;
    private void OpenDialog(string title, string message, Dialog.Category type)
    {
        DialogIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private void OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            NavigateToOTRequest();
        }
        DialogIsOpen = false;
    }
    private void NavigateToOTRequest()
    {
        Navigation.NavigateTo("/overtime/request");
    }
}
