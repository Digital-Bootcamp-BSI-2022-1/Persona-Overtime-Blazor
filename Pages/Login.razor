@page "/login"
@layout LoginLayout

@using Models
@using PersonaOvertimeWeb.Components
@using Services
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime
@inject IUserDetailService UserDetailService

<style>
    body {
        background-color: rgba(250, 250, 250, 1);
        font-family: Arial, Helvetica, sans-serif;
        padding: 0;
        margin: 0;
    }

    body div {
        width: 100%;
    }

    #logo img {
        margin-left: auto;
        margin-right: auto;
        display: block;
    }

    #login-title {
        color: white;
        font-size: 20px;
        font-weight: bold;
    }

    #login-button{
        width: 40%;
        font-weight: bold;
    }
</style>

<html>
<PageTitle>Login - Persona</PageTitle>

@* <meta name="viewport" content="width=device-width, initial-scale=1.0"> *@

<body>
    @* <div class="page"> *@
    <div class="row" style="background-color: rgba(250, 250, 250, 1); margin: 0;">
        <div class="col-sm-6" style="text-align: center; height: 90vh;">
            <div id="logo" class="container"
                style="width:100%; height:100%; display:flex;justify-content:center;align-items:center;">
                <img src="img/login_logo.png" alt="Persona" width="70%">
            </div>
        </div>
        <div class="col-sm-6"
            style="text-align: center; height: 90vh; background-color: rgba(40, 176, 234, 1); display:flex;justify-content:center;align-items:center;">
            <div id="login-input">
                <p id="login-title">LOGIN ACCOUNT</p>
                <br><br>
                <div class="inputs">
                    <div style="display:flex;justify-content:center;align-items:center;">
                        <div class="form-floating mb-3" style="width: 50%;">
                            <input type="text" class="form-control" id="floatingInput" placeholder="Username" @bind="username">
                            <label for="floatingInput">Username</label>
                        </div>
                    </div>
                    <div style="display:flex;justify-content:center;align-items:center;">
                        <div class="form-floating mb-3" style="width: 50%;">
                            <input type="password" class="form-control" id="floatingPassword" placeholder="Password" @bind="password">
                            <label for="floatingPassword">Password</label>
                        </div>
                    </div>
                </div>
                <br>
                <div>
                    <button @onclick="PostLogin" class="btn btn-light" id="login-button">LOGIN</button>
                </div>
                <br><br>
            </div>
        </div>
    </div>
    @* </div> *@

    @if (DialogIsOpen)
    {
        <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogClose" Type="@dialogType">
        </Dialog>
    }
</body>

</html>

@code {
    private bool isLoadingPage = true;
    private bool isLoggedIn = false;
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        isLoadingPage = true;
        var result = await ProtectedSessionStore.GetAsync<string>("token");
        if (result.Success)
        {
            isLoggedIn = true;
            NavigateToHome();
            isLoadingPage = false;
        }
        else
        {
            isLoggedIn = false;
            isLoadingPage = false;
        }
    }

    private string? username;
    private string? password;
    public HttpResponseMessage ResponseLogin { get; set; } = new();
    LoginRequest request = new LoginRequest();
    String responseMessage = "";
    LoginResponse loginMessage = new LoginResponse();

    private async Task PostLogin()
    {
        if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
        {
            request.nik = username;
            request.password = password;
            try
            {
                ResponseLogin = await UserDetailService.PostLogin(request);
                @* Console.WriteLine(ResponseLogin.RequestMessage);
                    Console.WriteLine(ResponseLogin.StatusCode); *@
                Console.WriteLine(ResponseLogin.IsSuccessStatusCode);
                responseMessage = await ResponseLogin.Content.ReadAsStringAsync();
                Console.WriteLine(responseMessage);
                if (ResponseLogin.IsSuccessStatusCode)
                {
                    loginMessage = JsonSerializer.Deserialize<LoginResponse>(responseMessage);
                    @* Console.WriteLine(loginMessage.token); *@
                    await ProtectedSessionStore.SetAsync("token", loginMessage.token);
                    OpenDialog(title: "Login Success", message: "Successfully logged in", type: Dialog.Category.Okay);
                }
                else
                {
                    OpenDialog(title: "Login Error", message: responseMessage, type: Dialog.Category.Null);
                }
            }
            catch (System.Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
        else
        {
            OpenDialog(title: "Login Error", message: "Username/Password incomplete", type: Dialog.Category.Null);
        }
    }


    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private string dialogTitle = "";
    private string dialogMessage = "";
    private Dialog.Category dialogType = Dialog.Category.Okay;
    private bool DialogIsOpen = false;
    private void OpenDialog(string title, string message, Dialog.Category type)
    {
        DialogIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private void OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            NavigateToHome();
        }
        DialogIsOpen = false;
    }
}
