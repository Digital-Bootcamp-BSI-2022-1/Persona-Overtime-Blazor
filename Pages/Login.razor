@page "/login"

@using Models
@using PersonaOvertimeWeb.Components
@using Services
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager Navigation
@inject IUserDetailService UserDetailService

<PageTitle>Login Page - Persona</PageTitle>

<div class="row">
    <div class="col-sm-6">
        <p>Column 1</p>
        <img src="img/login_logo.png" alt="Persona" width="200">

    </div>
    <div class="col-sm-6">
        <p>Column 2</p>
        <p>Login Account</p>
        <div class="inputs">
            <input type="text" placeholder="Username" @bind="username">
            <br><br>
            <input type="password" placeholder="Password" @bind="password">
        </div>
        <br>
        <button @onclick="PostLogin">Login</button>
    </div>
</div>

@if (DialogIsOpen)
{
    <Dialog Title="@dialogTitle" Content="@dialogMessage" OnClose="@OnDialogClose" Type="@dialogType">
    </Dialog>
}


@code {
    private string? username;
    private string? password;
    public HttpResponseMessage ResponseLogin { get; set; } = new();
    LoginRequest request = new LoginRequest();
    String responseMessage;
    LoginResponse loginMessage;

    private async Task PostLogin()
    {
        if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
        {
            request.nik = username;
            request.password = password;
            try
            {
                ResponseLogin = await UserDetailService.PostLogin(request);
                @* Console.WriteLine(ResponseLogin.RequestMessage);
                    Console.WriteLine(ResponseLogin.StatusCode); *@
                Console.WriteLine(ResponseLogin.IsSuccessStatusCode);
                responseMessage = await ResponseLogin.Content.ReadAsStringAsync();
                Console.WriteLine(responseMessage);
                if (ResponseLogin.IsSuccessStatusCode)
                {
                    loginMessage = JsonSerializer.Deserialize<LoginResponse>(responseMessage);
                    @* Console.WriteLine(loginMessage.token); *@
                    await ProtectedSessionStore.SetAsync("token", loginMessage.token);
                    OpenDialog(title: "Login Success", message: "Successfully logged in", type: Dialog.Category.Okay);
                }
                else
                {
                    OpenDialog(title: "Login Error", message: responseMessage, type: Dialog.Category.Null);
                }
            }
            catch (System.Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    }


    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private string dialogTitle = "";
    private string dialogMessage = "";
    private Dialog.Category dialogType = Dialog.Category.Okay;
    private bool DialogIsOpen = false;
    private void OpenDialog(string title, string message, Dialog.Category type)
    {
        DialogIsOpen = true;
        dialogTitle = title;
        dialogMessage = message;
        dialogType = type;
    }
    private void OnDialogClose(bool isOk)
    {
        if (isOk)
        {
            NavigateToHome();
        }
        DialogIsOpen = false;
    }
}
